/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_SwigAndroidGuideJNI = NULL;
    jmethodID director_method_ids[7];
  }
}

#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


  #include <functional>
  #include <iostream>

  #ifndef SWIG_DIRECTORS
  #error "Directors must be enabled in your SWIG module for std_function.i to work correctly"
  #endif


#include <memory>
#include <string>


namespace
{
	std::shared_ptr<std::string> convertStringFromJavaToCpp(JNIEnv *jenv, jstring javaString)
	{
		if (!javaString) return nullptr;
		
		const char * psz_string = jenv->GetStringUTFChars(javaString, NULL);
		if (!psz_string)
		{
			return nullptr;
		}
		
		std::shared_ptr<std::string> cppString = std::make_shared<std::string>(psz_string);
		jenv->ReleaseStringUTFChars(javaString, psz_string);
		return cppString;
	}
	
	jstring convertStringFromCppToJava(JNIEnv *jenv, std::shared_ptr<std::string> cppString)
	{
		if (!cppString)
		{
			return nullptr;
		}

		return jenv->NewStringUTF(cppString->c_str());
	}
}


#include <memory>
#include <vector>


namespace
{
	std::shared_ptr<std::vector<unsigned char>> convertArrayOfBytesFromJavaToCpp(JNIEnv *jenv, jbyteArray javaArrayOfBytes)
	{
		if (!javaArrayOfBytes) return nullptr;
		
		jbyte *p_buffer = jenv->GetByteArrayElements(javaArrayOfBytes, nullptr);
		if (!p_buffer) return nullptr;
		
		jsize lengthOfBuffer = jenv->GetArrayLength(javaArrayOfBytes);
		std::shared_ptr<std::vector<unsigned char>> result;
		if (lengthOfBuffer != 0)
		{
			result = std::make_shared<std::vector<unsigned char>>(p_buffer, p_buffer + lengthOfBuffer);
		}
		else
		{
			result = std::make_shared<std::vector<unsigned char>>();
		}
		
		jenv->ReleaseByteArrayElements(javaArrayOfBytes, p_buffer, 0);
		return result;
	}
	
	jbyteArray convertArrayOfBytesFromCppToJava(JNIEnv *jenv, std::shared_ptr<std::vector<unsigned char>> vectorOfBytes)
	{
		if (!vectorOfBytes) return nullptr;

		jbyteArray javaArrayOfByte = jenv->NewByteArray(vectorOfBytes->size());
		if (!javaArrayOfByte) return nullptr;
		
		if (vectorOfBytes->size() != 0)
		{
			jenv->SetByteArrayRegion(javaArrayOfByte, 0, vectorOfBytes->size(), (jbyte *) &vectorOfBytes->at(0));
		}
		
		return javaArrayOfByte;
	}
}


#include "Types.h"

namespace
{
	/*
	 * C++ type 'std::shared_ptr<std::vector<std::shared_ptr<std::vector<unsigned char>>>>' with alias 'shared_ptr_to_vector_of_shared_ptr_to_vector_of_bytes'
	 * is equivalent to Java type 'byte[][]',
	 * which is equivalent to JNI type: 'jobjectArray' with 'jbyteArray' elements.
	 * JNI descriptors are 'jobjectArray' = '[[B' (treat as byte[][]), 'jbyteArray' = '[B'.
	 * Note: more logical will be to pass two-dimensional array, but JNI does support only 1-dimentional arrays.
	 */

	shared_ptr_to_vector_of_shared_ptr_to_vector_of_bytes convertArrayOfArraysOfByteFromJavaToCpp(JNIEnv *jenv, jobjectArray javaArrayOfArraysOfBytes)
	{
		if(javaArrayOfArraysOfBytes == nullptr) return nullptr;
		
		// Create outer vector
		
		jsize sizeOfArrayOfArrays = jenv->GetArrayLength(javaArrayOfArraysOfBytes);
		std::shared_ptr<std::vector<shared_ptr_to_vector_of_bytes>> vectorOfVectorsOfBytes = std::make_shared<std::vector<shared_ptr_to_vector_of_bytes>>();
		vectorOfVectorsOfBytes->reserve((size_t) sizeOfArrayOfArrays);
		
		// Push all inner vectors into outer vector
		
		for(jsize i = 0; i < sizeOfArrayOfArrays; ++i)
		{
			// Null array
			
			jbyteArray arrayOfBytes = (jbyteArray) (jenv->GetObjectArrayElement(javaArrayOfArraysOfBytes, i));
			if (arrayOfBytes == nullptr)
			{
				vectorOfVectorsOfBytes->push_back(nullptr);
				continue;
			}

			// Empty array

			jsize sizeOfBuffer = jenv->GetArrayLength(arrayOfBytes);
			if(sizeOfBuffer == 0)
			{
				vectorOfVectorsOfBytes->push_back(std::make_shared<vector_of_bytes>());
				continue;
			}

			// Array with elements

			jbyte *bufferOfBytes = jenv->GetByteArrayElements(arrayOfBytes, nullptr);
			shared_ptr_to_vector_of_bytes vector = std::make_shared<vector_of_bytes>(bufferOfBytes, bufferOfBytes + sizeOfBuffer);
			vectorOfVectorsOfBytes->push_back(vector);
			jenv->ReleaseByteArrayElements(arrayOfBytes, bufferOfBytes, 0);
		}

		return vectorOfVectorsOfBytes;
	}
	
	jobjectArray convertArrayOfArraysOfByteFromCppToJava(JNIEnv *jenv, shared_ptr_to_vector_of_shared_ptr_to_vector_of_bytes vectorOfVectorsOfBytes)
	{
		if (!vectorOfVectorsOfBytes) return nullptr;

		// Allocate array of objects, where each object is 'jbyteArray'

		jsize sizeOfArrayOfArrays = (jsize) vectorOfVectorsOfBytes->size();
		jclass classOfJByteArray = jenv->FindClass("[B"); // '[B' is the JNI field descriptor for the Java byte[] type
		jobjectArray arrayOfArraysOfBytes = jenv->NewObjectArray(sizeOfArrayOfArrays, classOfJByteArray, nullptr);

		// Set inner arrays to it

		for(jsize i = 0; i < sizeOfArrayOfArrays; ++i)
		{
			// Null array
			
			shared_ptr_to_vector_of_bytes vectorOfBytes = vectorOfVectorsOfBytes->at(i);
			if (!vectorOfBytes)
			{
				continue;
			}
			
			// Empty array
			
			jsize sizeOfArray = (jsize) vectorOfBytes->size();
			jbyteArray javaArrayOfBytes = jenv->NewByteArray(sizeOfArray);
			jenv->SetObjectArrayElement(arrayOfArraysOfBytes, (jsize) i, javaArrayOfBytes);
			if (sizeOfArray == 0)
			{
				continue;
			}
			
			// Array with elements
			
			jenv->SetByteArrayRegion(javaArrayOfBytes, 0, sizeOfArray, (jbyte *) &(vectorOfBytes->at(0)));
		}

		return arrayOfArraysOfBytes;
	}
}


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< byte > *new_std_vector_Sl_byte_Sg___SWIG_2(jint count,unsigned char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned char >(static_cast<std::vector< unsigned char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_byte_Sg__doSize(std::vector< byte > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_byte_Sg__doAdd__SWIG_0(std::vector< byte > *self,std::vector< unsigned char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_byte_Sg__doAdd__SWIG_1(std::vector< byte > *self,jint index,std::vector< unsigned char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_byte_Sg__doRemove(std::vector< byte > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_byte_Sg__doGet(std::vector< byte > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_byte_Sg__doSet(std::vector< byte > *self,jint index,std::vector< unsigned char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_byte_Sg__doRemoveRange(std::vector< byte > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< byte > > *new_std_vector_Sl_std_vector_Sl_byte_Sg__Sg___SWIG_2(jint count,std::vector< byte > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::vector< byte > >(static_cast<std::vector< std::vector< byte > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doSize(std::vector< std::vector< byte > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doAdd__SWIG_0(std::vector< std::vector< byte > > *self,std::vector< std::vector< unsigned char > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doAdd__SWIG_1(std::vector< std::vector< byte > > *self,jint index,std::vector< std::vector< unsigned char > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doRemove(std::vector< std::vector< byte > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::vector< byte > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type const &std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doGet(std::vector< std::vector< byte > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::vector< unsigned char > >::value_type std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doSet(std::vector< std::vector< byte > > *self,jint index,std::vector< std::vector< unsigned char > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::vector< byte > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doRemoveRange(std::vector< std::vector< byte > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

  struct FunctorVoidImpl {
    virtual ~FunctorVoidImpl() {}
    virtual void call() = 0;
  };

SWIGINTERN std::function< void () > *new_std_function_Sl_void_Sp__SP__Sg___SWIG_2(FunctorVoidImpl *in){
        return new std::function<void()>([=]{
          return in->call();
        });
      }

#include "Types.h"
#include "Message.h"
#include "PhotoMessage.h"
#include "ActivityModel.h"
#include "IAndroidActivity.h"
#include "ITaskScheduler.h"


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::shared_ptr< SwigAndroidGuide::PhotoMessage > SwigAndroidGuide_PhotoMessage_dynamic_cast(std::shared_ptr< SwigAndroidGuide::Message > arg){
        return std::dynamic_pointer_cast<SwigAndroidGuide::PhotoMessage>(arg);
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "SwigAndroidGuide_wrap.h"

SwigDirector_FunctorVoidImpl::SwigDirector_FunctorVoidImpl(JNIEnv *jenv) : FunctorVoidImpl(), Swig::Director(jenv) {
}

SwigDirector_FunctorVoidImpl::~SwigDirector_FunctorVoidImpl() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_FunctorVoidImpl::call() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method FunctorVoidImpl::call.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_SwigAndroidGuideJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in FunctorVoidImpl::call ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_FunctorVoidImpl::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "call", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/goldberg/swigandroidguide/swiggenerated/FunctorVoidImpl");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IAndroidActivity::SwigDirector_IAndroidActivity(JNIEnv *jenv) : SwigAndroidGuide::IAndroidActivity(), Swig::Director(jenv) {
}

SwigDirector_IAndroidActivity::~SwigDirector_IAndroidActivity() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IAndroidActivity::showToast(std::string text) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtext  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigAndroidGuide::IAndroidActivity::showToast.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtext = jenv->NewStringUTF((&text)->c_str());
    Swig::LocalRefGuard text_refguard(jenv, jtext); 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigAndroidGuideJNI, Swig::director_method_ids[1], swigjobj, jtext);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigAndroidGuide::IAndroidActivity::showToast ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_IAndroidActivity::sendMessage(std::shared_ptr< SwigAndroidGuide::Message > message) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessage  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigAndroidGuide::IAndroidActivity::sendMessage.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmessage = 0;
    if (message) {
      *((std::shared_ptr<  SwigAndroidGuide::Message > **)&jmessage) = new std::shared_ptr<  SwigAndroidGuide::Message >(message);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigAndroidGuideJNI, Swig::director_method_ids[2], swigjobj, jmessage);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigAndroidGuide::IAndroidActivity::sendMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigAndroidGuide::ITaskScheduler *SwigDirector_IAndroidActivity::getTaskScheduler() {
  SwigAndroidGuide::ITaskScheduler *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigAndroidGuide::IAndroidActivity::getTaskScheduler.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_SwigAndroidGuideJNI, Swig::director_method_ids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = *(SwigAndroidGuide::ITaskScheduler **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigAndroidGuide::IAndroidActivity::getTaskScheduler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_IAndroidActivity::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "showToast", "(Ljava/lang/String;)V", NULL 
    },
    {
      "sendMessage", "(Lcom/goldberg/swigandroidguide/swiggenerated/Message;)V", NULL 
    },
    {
      "getTaskScheduler", "()Lcom/goldberg/swigandroidguide/swiggenerated/ITaskScheduler;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/goldberg/swigandroidguide/swiggenerated/IAndroidActivity");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ITaskScheduler::SwigDirector_ITaskScheduler(JNIEnv *jenv) : SwigAndroidGuide::ITaskScheduler(), Swig::Director(jenv) {
}

SwigDirector_ITaskScheduler::~SwigDirector_ITaskScheduler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_ITaskScheduler::isMainThread() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigAndroidGuide::ITaskScheduler::isMainThread.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_SwigAndroidGuideJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigAndroidGuide::ITaskScheduler::isMainThread ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ITaskScheduler::executeOnBackgroundThread(std::function< void () > function) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunction  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigAndroidGuide::ITaskScheduler::executeOnBackgroundThread.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfunction = 0;
    *((std::function< void () > **)&jfunction) = new std::function< void () >((const std::function< void () > &)function); 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigAndroidGuideJNI, Swig::director_method_ids[5], swigjobj, jfunction);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigAndroidGuide::ITaskScheduler::executeOnBackgroundThread ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITaskScheduler::executeOnUIThread(std::function< void () > function) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfunction  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method SwigAndroidGuide::ITaskScheduler::executeOnUIThread.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfunction = 0;
    *((std::function< void () > **)&jfunction) = new std::function< void () >((const std::function< void () > &)function); 
    jenv->CallStaticVoidMethod(Swig::jclass_SwigAndroidGuideJNI, Swig::director_method_ids[6], swigjobj, jfunction);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in SwigAndroidGuide::ITaskScheduler::executeOnUIThread ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ITaskScheduler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "isMainThread", "()Z", NULL 
    },
    {
      "executeOnBackgroundThread", "(Lcom/goldberg/swigandroidguide/swiggenerated/FunctorVoid;)V", NULL 
    },
    {
      "executeOnUIThread", "(Lcom/goldberg/swigandroidguide/swiggenerated/FunctorVoid;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/goldberg/swigandroidguide/swiggenerated/ITaskScheduler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1shared_1ptr_1to_1string(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::shared_ptr< std::string > *)new std::shared_ptr< std::string >();
  *(std::shared_ptr< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1shared_1ptr_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::shared_ptr< std::string > *arg1 = (std::shared_ptr< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::shared_ptr< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1shared_1ptr_1to_1vector_1of_1shared_1ptr_1to_1vector_1of_1bytes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< std::vector< std::shared_ptr< std::vector< unsigned char > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::shared_ptr< std::vector< std::shared_ptr< std::vector< unsigned char > > > > *)new std::shared_ptr< std::vector< std::shared_ptr< std::vector< unsigned char > > > >();
  *(std::shared_ptr< std::vector< std::shared_ptr< std::vector< unsigned char > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1shared_1ptr_1to_1vector_1of_1shared_1ptr_1to_1vector_1of_1bytes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::shared_ptr< std::vector< std::shared_ptr< std::vector< unsigned char > > > > *arg1 = (std::shared_ptr< std::vector< std::shared_ptr< std::vector< unsigned char > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::shared_ptr< std::vector< std::shared_ptr< std::vector< unsigned char > > > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1VectorByte_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< byte > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< byte > *)new std::vector< byte >();
  *(std::vector< byte > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1VectorByte_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< byte > *arg1 = 0 ;
  std::vector< byte > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< byte > const & reference is null");
    return 0;
  } 
  result = (std::vector< byte > *)new std::vector< byte >((std::vector< byte > const &)*arg1);
  *(std::vector< byte > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  result = ((std::vector< byte > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  result = (bool)((std::vector< byte > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1VectorByte_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< byte > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< byte > *)new_std_vector_Sl_byte_Sg___SWIG_2(arg1,(unsigned char const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< byte > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  try {
    result = std_vector_Sl_byte_Sg__doSize((std::vector< unsigned char > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_byte_Sg__doAdd__SWIG_0(arg1,(unsigned char const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_byte_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jshort JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_byte_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_byte_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jshort jresult = 0 ;
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< unsigned char >::value_type)std_vector_Sl_byte_Sg__doSet(arg1,arg2,(unsigned char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorByte_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< byte > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_byte_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1VectorByte(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< byte > *arg1 = (std::vector< byte > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< byte > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1VectorVectorByte_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< byte > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< byte > > *)new std::vector< std::vector< byte > >();
  *(std::vector< std::vector< byte > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1VectorVectorByte_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< byte > > *arg1 = 0 ;
  std::vector< std::vector< byte > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< byte > > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::vector< byte > > *)new std::vector< std::vector< byte > >((std::vector< std::vector< byte > > const &)*arg1);
  *(std::vector< std::vector< byte > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  result = ((std::vector< std::vector< byte > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  std::vector< std::vector< unsigned char > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  arg2 = (std::vector< std::vector< unsigned char > >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< byte > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1VectorVectorByte_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::vector< byte > *arg2 = 0 ;
  std::vector< std::vector< byte > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(std::vector< byte > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< byte > const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< std::vector< byte > > *)new_std_vector_Sl_std_vector_Sl_byte_Sg__Sg___SWIG_2(arg1,(std::vector< unsigned char > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< byte > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  try {
    result = std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doSize((std::vector< std::vector< unsigned char > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  std::vector< std::vector< unsigned char > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doAdd__SWIG_0(arg1,(std::vector< unsigned char > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = new std::vector< std::vector< unsigned char > >::value_type((const std::vector< std::vector< unsigned char > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::vector< unsigned char > >::value_type *) &std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  jint arg2 ;
  std::vector< std::vector< unsigned char > >::value_type *arg3 = 0 ;
  std::vector< std::vector< unsigned char > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< std::vector< unsigned char > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< unsigned char > >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doSet(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::vector< unsigned char > >::value_type **)&jresult = new std::vector< std::vector< unsigned char > >::value_type((const std::vector< std::vector< unsigned char > >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_VectorVectorByte_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_byte_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1VectorVectorByte(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< byte > > *arg1 = (std::vector< std::vector< byte > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< byte > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1FunctorVoidImpl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FunctorVoidImpl *arg1 = (FunctorVoidImpl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FunctorVoidImpl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_FunctorVoidImpl_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FunctorVoidImpl *arg1 = (FunctorVoidImpl *) 0 ;
  SwigDirector_FunctorVoidImpl *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctorVoidImpl **)&jarg1; 
  darg = dynamic_cast<SwigDirector_FunctorVoidImpl *>(arg1);
  (darg)->call();
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1FunctorVoidImpl(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FunctorVoidImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FunctorVoidImpl *)new SwigDirector_FunctorVoidImpl(jenv);
  *(FunctorVoidImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_FunctorVoidImpl_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  FunctorVoidImpl *obj = *((FunctorVoidImpl **)&objarg);
  (void)jcls;
  SwigDirector_FunctorVoidImpl *director = static_cast<SwigDirector_FunctorVoidImpl *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_FunctorVoidImpl_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  FunctorVoidImpl *obj = *((FunctorVoidImpl **)&objarg);
  SwigDirector_FunctorVoidImpl *director = dynamic_cast<SwigDirector_FunctorVoidImpl *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1FunctorVoid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::function< void () > *arg1 = 0 ;
  std::function< void () > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::function< void () > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::function< void () > const & reference is null");
    return 0;
  } 
  result = (std::function< void () > *)new std::function< void () >((std::function< void () > const &)*arg1);
  *(std::function< void () > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_FunctorVoid_1call(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::function< void () > *arg1 = (std::function< void () > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::function< void () > **)&jarg1; 
  ((std::function< void () > const *)arg1)->operator ()();
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1FunctorVoid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void (*arg1)() = (void (*)()) (void (*)())0 ;
  std::function< void () > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void (**)())&jarg1; 
  result = (std::function< void () > *)new std::function< void () >(arg1);
  *(std::function< void () > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1FunctorVoid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FunctorVoidImpl *arg1 = (FunctorVoidImpl *) 0 ;
  std::function< void () > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FunctorVoidImpl **)&jarg1; 
  result = (std::function< void () > *)new_std_function_Sl_void_Sp__SP__Sg___SWIG_2(arg1);
  *(std::function< void () > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1FunctorVoid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::function< void () > *arg1 = (std::function< void () > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::function< void () > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1Message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigAndroidGuide::Message *arg1 = (SwigAndroidGuide::Message *) 0 ;
  std::shared_ptr< SwigAndroidGuide::Message > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::Message > **)&jarg1;
  arg1 = (SwigAndroidGuide::Message *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_Message_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigAndroidGuide::Message *arg1 = (SwigAndroidGuide::Message *) 0 ;
  std::shared_ptr< SwigAndroidGuide::Message > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::Message > **)&jarg1;
  arg1 = (SwigAndroidGuide::Message *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->getId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_Message_1setId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SwigAndroidGuide::Message *arg1 = (SwigAndroidGuide::Message *) 0 ;
  int arg2 ;
  std::shared_ptr< SwigAndroidGuide::Message > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::Message > **)&jarg1;
  arg1 = (SwigAndroidGuide::Message *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->setId(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_Message_1getText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SwigAndroidGuide::Message *arg1 = (SwigAndroidGuide::Message *) 0 ;
  std::shared_ptr< SwigAndroidGuide::Message > *smartarg1 = 0 ;
  std::shared_ptr< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::Message > **)&jarg1;
  arg1 = (SwigAndroidGuide::Message *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getText();
  {
    return convertStringFromCppToJava(jenv, result);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_Message_1setText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SwigAndroidGuide::Message *arg1 = (SwigAndroidGuide::Message *) 0 ;
  std::shared_ptr< std::string > arg2 ;
  std::shared_ptr< SwigAndroidGuide::Message > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::Message > **)&jarg1;
  arg1 = (SwigAndroidGuide::Message *)(smartarg1 ? smartarg1->get() : 0); 
  {
    arg2 = convertStringFromJavaToCpp(jenv, jarg2);
  }
  (arg1)->setText(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_Message_1getCreationDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigAndroidGuide::Message *arg1 = (SwigAndroidGuide::Message *) 0 ;
  std::shared_ptr< SwigAndroidGuide::Message const > *smartarg1 = 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const SwigAndroidGuide::Message > **)&jarg1;
  arg1 = (SwigAndroidGuide::Message *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((SwigAndroidGuide::Message const *)arg1)->getCreationDate();
  jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_Message_1setCreationDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SwigAndroidGuide::Message *arg1 = (SwigAndroidGuide::Message *) 0 ;
  time_t arg2 ;
  std::shared_ptr< SwigAndroidGuide::Message > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::Message > **)&jarg1;
  arg1 = (SwigAndroidGuide::Message *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2;
  (arg1)->setCreationDate(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1Message(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigAndroidGuide::Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigAndroidGuide::Message *)new SwigAndroidGuide::Message();
  
  *(std::shared_ptr<  SwigAndroidGuide::Message > **)&jresult = result ? new std::shared_ptr<  SwigAndroidGuide::Message >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_PhotoMessage_1getPhotoData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigAndroidGuide::PhotoMessage *arg1 = (SwigAndroidGuide::PhotoMessage *) 0 ;
  std::shared_ptr< SwigAndroidGuide::PhotoMessage > *smartarg1 = 0 ;
  std::vector< byte > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::PhotoMessage > **)&jarg1;
  arg1 = (SwigAndroidGuide::PhotoMessage *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->getPhotoData();
  *(std::vector< byte > **)&jresult = new std::vector< byte >((const std::vector< byte > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_PhotoMessage_1setPhotoData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigAndroidGuide::PhotoMessage *arg1 = (SwigAndroidGuide::PhotoMessage *) 0 ;
  std::vector< byte > arg2 ;
  std::shared_ptr< SwigAndroidGuide::PhotoMessage > *smartarg1 = 0 ;
  std::vector< byte > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::PhotoMessage > **)&jarg1;
  arg1 = (SwigAndroidGuide::PhotoMessage *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< byte > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< byte >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setPhotoData(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_PhotoMessage_1dynamic_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< SwigAndroidGuide::Message > arg1 ;
  std::shared_ptr< SwigAndroidGuide::Message > *argp1 ;
  std::shared_ptr< SwigAndroidGuide::PhotoMessage > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< SwigAndroidGuide::Message > **)&jarg1;
  if (argp1) arg1 = *argp1; 
  result = SwigAndroidGuide_PhotoMessage_dynamic_cast(arg1);
  *(std::shared_ptr< SwigAndroidGuide::PhotoMessage > **)&jresult = result ? new std::shared_ptr< SwigAndroidGuide::PhotoMessage >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1PhotoMessage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigAndroidGuide::PhotoMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigAndroidGuide::PhotoMessage *)new SwigAndroidGuide::PhotoMessage();
  
  *(std::shared_ptr<  SwigAndroidGuide::PhotoMessage > **)&jresult = result ? new std::shared_ptr<  SwigAndroidGuide::PhotoMessage >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1PhotoMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigAndroidGuide::PhotoMessage *arg1 = (SwigAndroidGuide::PhotoMessage *) 0 ;
  std::shared_ptr< SwigAndroidGuide::PhotoMessage > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  SwigAndroidGuide::PhotoMessage > **)&jarg1;
  arg1 = (SwigAndroidGuide::PhotoMessage *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ActivityModel_1onCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigAndroidGuide::ActivityModel *arg1 = (SwigAndroidGuide::ActivityModel *) 0 ;
  SwigAndroidGuide::IAndroidActivity *arg2 = (SwigAndroidGuide::IAndroidActivity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SwigAndroidGuide::ActivityModel **)&jarg1; 
  arg2 = *(SwigAndroidGuide::IAndroidActivity **)&jarg2; 
  (arg1)->onCreate(arg2);
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ActivityModel_1setMultiplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SwigAndroidGuide::ActivityModel *arg1 = (SwigAndroidGuide::ActivityModel *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigAndroidGuide::ActivityModel **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setMultiplier(arg2);
}


SWIGEXPORT jint JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ActivityModel_1multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SwigAndroidGuide::ActivityModel *arg1 = (SwigAndroidGuide::ActivityModel *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigAndroidGuide::ActivityModel **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->multiply(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ActivityModel_1multiply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SwigAndroidGuide::ActivityModel::multiply(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ActivityModel_1decryptMessages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jint jresult = 0 ;
  SwigAndroidGuide::ActivityModel *arg1 = (SwigAndroidGuide::ActivityModel *) 0 ;
  shared_ptr_to_vector_of_shared_ptr_to_vector_of_bytes arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigAndroidGuide::ActivityModel **)&jarg1; 
  {
    arg2 = convertArrayOfArraysOfByteFromJavaToCpp(jenv, jarg2);
  }
  result = (int)(arg1)->decryptMessages(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1ActivityModel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigAndroidGuide::ActivityModel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigAndroidGuide::ActivityModel *)new SwigAndroidGuide::ActivityModel();
  *(SwigAndroidGuide::ActivityModel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1ActivityModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigAndroidGuide::ActivityModel *arg1 = (SwigAndroidGuide::ActivityModel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigAndroidGuide::ActivityModel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1IAndroidActivity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigAndroidGuide::IAndroidActivity *arg1 = (SwigAndroidGuide::IAndroidActivity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigAndroidGuide::IAndroidActivity **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_IAndroidActivity_1showToast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  SwigAndroidGuide::IAndroidActivity *arg1 = (SwigAndroidGuide::IAndroidActivity *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigAndroidGuide::IAndroidActivity **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->showToast(arg2);
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_IAndroidActivity_1sendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigAndroidGuide::IAndroidActivity *arg1 = (SwigAndroidGuide::IAndroidActivity *) 0 ;
  std::shared_ptr< SwigAndroidGuide::Message > arg2 ;
  std::shared_ptr< SwigAndroidGuide::Message > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SwigAndroidGuide::IAndroidActivity **)&jarg1; 
  argp2 = *(std::shared_ptr< SwigAndroidGuide::Message > **)&jarg2;
  if (argp2) arg2 = *argp2; 
  (arg1)->sendMessage(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_IAndroidActivity_1getTaskScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigAndroidGuide::IAndroidActivity *arg1 = (SwigAndroidGuide::IAndroidActivity *) 0 ;
  SwigAndroidGuide::ITaskScheduler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigAndroidGuide::IAndroidActivity **)&jarg1; 
  result = (SwigAndroidGuide::ITaskScheduler *)(arg1)->getTaskScheduler();
  *(SwigAndroidGuide::ITaskScheduler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1IAndroidActivity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigAndroidGuide::IAndroidActivity *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigAndroidGuide::IAndroidActivity *)new SwigDirector_IAndroidActivity(jenv);
  *(SwigAndroidGuide::IAndroidActivity **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_IAndroidActivity_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  SwigAndroidGuide::IAndroidActivity *obj = *((SwigAndroidGuide::IAndroidActivity **)&objarg);
  (void)jcls;
  SwigDirector_IAndroidActivity *director = static_cast<SwigDirector_IAndroidActivity *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_IAndroidActivity_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  SwigAndroidGuide::IAndroidActivity *obj = *((SwigAndroidGuide::IAndroidActivity **)&objarg);
  SwigDirector_IAndroidActivity *director = dynamic_cast<SwigDirector_IAndroidActivity *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_delete_1ITaskScheduler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SwigAndroidGuide::ITaskScheduler *arg1 = (SwigAndroidGuide::ITaskScheduler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SwigAndroidGuide::ITaskScheduler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ITaskScheduler_1isMainThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  SwigAndroidGuide::ITaskScheduler *arg1 = (SwigAndroidGuide::ITaskScheduler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SwigAndroidGuide::ITaskScheduler **)&jarg1; 
  result = (bool)(arg1)->isMainThread();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ITaskScheduler_1executeOnBackgroundThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigAndroidGuide::ITaskScheduler *arg1 = (SwigAndroidGuide::ITaskScheduler *) 0 ;
  SwigValueWrapper< std::function< void () > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SwigAndroidGuide::ITaskScheduler **)&jarg1; 
  {
    if (jarg2)
    {
      arg2 = **(std::function<void()>**)&(jarg2);
    }
    else
    {
      arg2 = std::function<void()>();
    }
  }
  (arg1)->executeOnBackgroundThread(arg2);
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ITaskScheduler_1executeOnUIThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SwigAndroidGuide::ITaskScheduler *arg1 = (SwigAndroidGuide::ITaskScheduler *) 0 ;
  SwigValueWrapper< std::function< void () > > arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SwigAndroidGuide::ITaskScheduler **)&jarg1; 
  {
    if (jarg2)
    {
      arg2 = **(std::function<void()>**)&(jarg2);
    }
    else
    {
      arg2 = std::function<void()>();
    }
  }
  (arg1)->executeOnUIThread(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_new_1ITaskScheduler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigAndroidGuide::ITaskScheduler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigAndroidGuide::ITaskScheduler *)new SwigDirector_ITaskScheduler(jenv);
  *(SwigAndroidGuide::ITaskScheduler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ITaskScheduler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  SwigAndroidGuide::ITaskScheduler *obj = *((SwigAndroidGuide::ITaskScheduler **)&objarg);
  (void)jcls;
  SwigDirector_ITaskScheduler *director = static_cast<SwigDirector_ITaskScheduler *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_ITaskScheduler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  SwigAndroidGuide::ITaskScheduler *obj = *((SwigAndroidGuide::ITaskScheduler **)&objarg);
  SwigDirector_ITaskScheduler *director = dynamic_cast<SwigDirector_ITaskScheduler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_PhotoMessage_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< SwigAndroidGuide::PhotoMessage > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< SwigAndroidGuide::PhotoMessage > **)&jarg1;
    *(std::shared_ptr< SwigAndroidGuide::Message > **)&baseptr = argp1 ? new std::shared_ptr< SwigAndroidGuide::Message >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_goldberg_swigandroidguide_swiggenerated_SwigAndroidGuideJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[7] = {
    {
      "SwigDirector_FunctorVoidImpl_call", "(Lcom/goldberg/swigandroidguide/swiggenerated/FunctorVoidImpl;)V" 
    },
    {
      "SwigDirector_IAndroidActivity_showToast", "(Lcom/goldberg/swigandroidguide/swiggenerated/IAndroidActivity;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_IAndroidActivity_sendMessage", "(Lcom/goldberg/swigandroidguide/swiggenerated/IAndroidActivity;J)V" 
    },
    {
      "SwigDirector_IAndroidActivity_getTaskScheduler", "(Lcom/goldberg/swigandroidguide/swiggenerated/IAndroidActivity;)J" 
    },
    {
      "SwigDirector_ITaskScheduler_isMainThread", "(Lcom/goldberg/swigandroidguide/swiggenerated/ITaskScheduler;)Z" 
    },
    {
      "SwigDirector_ITaskScheduler_executeOnBackgroundThread", "(Lcom/goldberg/swigandroidguide/swiggenerated/ITaskScheduler;J)V" 
    },
    {
      "SwigDirector_ITaskScheduler_executeOnUIThread", "(Lcom/goldberg/swigandroidguide/swiggenerated/ITaskScheduler;J)V" 
    }
  };
  Swig::jclass_SwigAndroidGuideJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_SwigAndroidGuideJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

